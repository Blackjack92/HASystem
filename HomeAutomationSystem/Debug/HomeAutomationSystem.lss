
HomeAutomationSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000c4c  00000ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080008c  0080008c  00000d0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bd  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a7  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b7  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00001e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f6  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000339  00000000  00000000  00002362  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000269b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 39       	cpi	r26, 0x9A	; 154
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 68 01 	call	0x2d0	; 0x2d0 <main>
  8a:	0c 94 24 06 	jmp	0xc48	; 0xc48 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <analogCompare_process>:
#include <avr/io.h>
#include <stdio.h>
#include <inttypes.h>

void* analogCompare_process(void* arg)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <analogCompare_process+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <analogCompare_process+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	9c 83       	std	Y+4, r25	; 0x04
  a0:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t value = (uint16_t)arg;
  a2:	8b 81       	ldd	r24, Y+3	; 0x03
  a4:	9c 81       	ldd	r25, Y+4	; 0x04
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	89 83       	std	Y+1, r24	; 0x01
	
	printf("%d\r\n", value);
  aa:	8a 81       	ldd	r24, Y+2	; 0x02
  ac:	8f 93       	push	r24
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	8f 93       	push	r24
  b2:	84 e7       	ldi	r24, 0x74	; 116
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	89 2f       	mov	r24, r25
  b8:	8f 93       	push	r24
  ba:	84 e7       	ldi	r24, 0x74	; 116
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	8f 93       	push	r24
  c0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
	
	if (value > 128)
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	9a 81       	ldd	r25, Y+2	; 0x02
  d0:	81 38       	cpi	r24, 0x81	; 129
  d2:	91 05       	cpc	r25, r1
  d4:	18 f0       	brcs	.+6      	; 0xdc <analogCompare_process+0x4a>
	{
		return (void*)1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <analogCompare_process+0x4e>
	}
	else
	{
		return (void*)0;
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
	}
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <ADC_Read>:
#include <avr/io.h>

bool analogIn_loaded = false;

uint16_t ADC_Read( uint8_t channel )
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	1f 92       	push	r1
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	89 83       	std	Y+1, r24	; 0x01
	// Kanal waehlen, ohne andere Bits zu beeinflußen
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
  fa:	87 e2       	ldi	r24, 0x27	; 39
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	27 e2       	ldi	r18, 0x27	; 39
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	32 2f       	mov	r19, r18
 108:	30 7e       	andi	r19, 0xE0	; 224
 10a:	29 81       	ldd	r18, Y+1	; 0x01
 10c:	2f 71       	andi	r18, 0x1F	; 31
 10e:	23 2b       	or	r18, r19
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);            // eine Wandlung "single conversion"
 114:	86 e2       	ldi	r24, 0x26	; 38
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	26 e2       	ldi	r18, 0x26	; 38
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	20 64       	ori	r18, 0x40	; 64
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
	while (ADCSRA & (1<<ADSC) ) {   // auf Abschluss der Konvertierung warten
 126:	00 00       	nop
 128:	86 e2       	ldi	r24, 0x26	; 38
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	80 81       	ld	r24, Z
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	80 74       	andi	r24, 0x40	; 64
 136:	99 27       	eor	r25, r25
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	b1 f7       	brne	.-20     	; 0x128 <ADC_Read+0x3a>
	}
	return ADCH;                    // ADC auslesen und zurückgeben
 13c:	85 e2       	ldi	r24, 0x25	; 37
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z
 144:	88 2f       	mov	r24, r24
 146:	90 e0       	ldi	r25, 0x00	; 0
}
 148:	0f 90       	pop	r0
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <analogIn_process>:
	
void* analogIn_process(void* arg)
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	00 d0       	rcall	.+0      	; 0x156 <analogIn_process+0x6>
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	9a 83       	std	Y+2, r25	; 0x02
 15c:	89 83       	std	Y+1, r24	; 0x01
	if (!analogIn_loaded)
 15e:	90 91 8c 00 	lds	r25, 0x008C
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	89 27       	eor	r24, r25
 166:	88 23       	and	r24, r24
 168:	a1 f1       	breq	.+104    	; 0x1d2 <analogIn_process+0x82>
	{
		DDRA = 0x00;
 16a:	8a e3       	ldi	r24, 0x3A	; 58
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	fc 01       	movw	r30, r24
 170:	10 82       	st	Z, r1
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
 172:	86 e2       	ldi	r24, 0x26	; 38
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	26 e2       	ldi	r18, 0x26	; 38
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	27 60       	ori	r18, 0x07	; 7
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18

		ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
 184:	87 e2       	ldi	r24, 0x27	; 39
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	27 e2       	ldi	r18, 0x27	; 39
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	f9 01       	movw	r30, r18
 18e:	20 81       	ld	r18, Z
 190:	20 64       	ori	r18, 0x40	; 64
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
		ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
 196:	87 e2       	ldi	r24, 0x27	; 39
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	27 e2       	ldi	r18, 0x27	; 39
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	20 81       	ld	r18, Z
 1a2:	20 62       	ori	r18, 0x20	; 32
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18

		// No MUX values needed to be changed to use ADC0

		//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode

		ADCSRA |= (1 << ADEN);  // Enable ADC
 1a8:	86 e2       	ldi	r24, 0x26	; 38
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	26 e2       	ldi	r18, 0x26	; 38
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	f9 01       	movw	r30, r18
 1b2:	20 81       	ld	r18, Z
 1b4:	20 68       	ori	r18, 0x80	; 128
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18
		ADCSRA |= (1 << ADSC);  // Start A2D Conversions
 1ba:	86 e2       	ldi	r24, 0x26	; 38
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	26 e2       	ldi	r18, 0x26	; 38
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	f9 01       	movw	r30, r18
 1c4:	20 81       	ld	r18, Z
 1c6:	20 64       	ori	r18, 0x40	; 64
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
		
		analogIn_loaded = true;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 8c 00 	sts	0x008C, r24
	}
	
	return (void*)ADC_Read(4);
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	0e 94 77 00 	call	0xee	; 0xee <ADC_Read>
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <binaryOut_process>:
#include <avr/io.h>

bool binaryOut_loaded = false;

void* binaryOut_process(void* arg)
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	00 d0       	rcall	.+0      	; 0x1e8 <binaryOut_process+0x6>
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	9a 83       	std	Y+2, r25	; 0x02
 1ee:	89 83       	std	Y+1, r24	; 0x01
	if (!binaryOut_loaded)
 1f0:	90 91 8d 00 	lds	r25, 0x008D
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	89 27       	eor	r24, r25
 1f8:	88 23       	and	r24, r24
 1fa:	61 f0       	breq	.+24     	; 0x214 <binaryOut_process+0x32>
	{
		DDRD |= 1 << DDD7;
 1fc:	81 e3       	ldi	r24, 0x31	; 49
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	21 e3       	ldi	r18, 0x31	; 49
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	20 68       	ori	r18, 0x80	; 128
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
		binaryOut_loaded = true;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 8d 00 	sts	0x008D, r24
	}
	if (arg != (void*)0)
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	9a 81       	ldd	r25, Y+2	; 0x02
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	51 f0       	breq	.+20     	; 0x230 <binaryOut_process+0x4e>
	{
		PORTD |= 1 << PD7;
 21c:	82 e3       	ldi	r24, 0x32	; 50
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	22 e3       	ldi	r18, 0x32	; 50
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	f9 01       	movw	r30, r18
 226:	20 81       	ld	r18, Z
 228:	20 68       	ori	r18, 0x80	; 128
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
 22e:	09 c0       	rjmp	.+18     	; 0x242 <binaryOut_process+0x60>
	}
	else
	{
		PORTD &= ~(1 << PD7);
 230:	82 e3       	ldi	r24, 0x32	; 50
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	22 e3       	ldi	r18, 0x32	; 50
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	f9 01       	movw	r30, r18
 23a:	20 81       	ld	r18, Z
 23c:	2f 77       	andi	r18, 0x7F	; 127
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18
	}
	return NULL;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <addFilterNode>:
#include "Filter.h"
#include <stdlib.h>
#include <avr/io.h>

filterNode* addFilterNode(filterNode* list, filterNode* node)
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	00 d0       	rcall	.+0      	; 0x256 <addFilterNode+0x6>
 256:	00 d0       	rcall	.+0      	; 0x258 <addFilterNode+0x8>
 258:	00 d0       	rcall	.+0      	; 0x25a <addFilterNode+0xa>
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	9c 83       	std	Y+4, r25	; 0x04
 260:	8b 83       	std	Y+3, r24	; 0x03
 262:	7e 83       	std	Y+6, r23	; 0x06
 264:	6d 83       	std	Y+5, r22	; 0x05
	PORTD |= 1 << PD7;
 266:	82 e3       	ldi	r24, 0x32	; 50
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	22 e3       	ldi	r18, 0x32	; 50
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	f9 01       	movw	r30, r18
 270:	20 81       	ld	r18, Z
 272:	20 68       	ori	r18, 0x80	; 128
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
	if (list == NULL)
 278:	8b 81       	ldd	r24, Y+3	; 0x03
 27a:	9c 81       	ldd	r25, Y+4	; 0x04
 27c:	00 97       	sbiw	r24, 0x00	; 0
 27e:	19 f4       	brne	.+6      	; 0x286 <addFilterNode+0x36>
	{
		return node;
 280:	8d 81       	ldd	r24, Y+5	; 0x05
 282:	9e 81       	ldd	r25, Y+6	; 0x06
 284:	1c c0       	rjmp	.+56     	; 0x2be <addFilterNode+0x6e>
	}

	filterNode* last = list;
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	9c 81       	ldd	r25, Y+4	; 0x04
 28a:	9a 83       	std	Y+2, r25	; 0x02
 28c:	89 83       	std	Y+1, r24	; 0x01
	while(last->next != NULL)
 28e:	07 c0       	rjmp	.+14     	; 0x29e <addFilterNode+0x4e>
	{
		last = last->next;
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	9a 81       	ldd	r25, Y+2	; 0x02
 294:	fc 01       	movw	r30, r24
 296:	82 81       	ldd	r24, Z+2	; 0x02
 298:	93 81       	ldd	r25, Z+3	; 0x03
 29a:	9a 83       	std	Y+2, r25	; 0x02
 29c:	89 83       	std	Y+1, r24	; 0x01
	{
		return node;
	}

	filterNode* last = list;
	while(last->next != NULL)
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	9a 81       	ldd	r25, Y+2	; 0x02
 2a2:	fc 01       	movw	r30, r24
 2a4:	82 81       	ldd	r24, Z+2	; 0x02
 2a6:	93 81       	ldd	r25, Z+3	; 0x03
 2a8:	00 97       	sbiw	r24, 0x00	; 0
 2aa:	91 f7       	brne	.-28     	; 0x290 <addFilterNode+0x40>
	{
		last = last->next;
	}
	last->next = node;
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	9a 81       	ldd	r25, Y+2	; 0x02
 2b0:	2d 81       	ldd	r18, Y+5	; 0x05
 2b2:	3e 81       	ldd	r19, Y+6	; 0x06
 2b4:	fc 01       	movw	r30, r24
 2b6:	33 83       	std	Z+3, r19	; 0x03
 2b8:	22 83       	std	Z+2, r18	; 0x02
	return list;
 2ba:	8b 81       	ldd	r24, Y+3	; 0x03
 2bc:	9c 81       	ldd	r25, Y+4	; 0x04
 2be:	26 96       	adiw	r28, 0x06	; 6
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <main>:


filterNode* filterList = NULL;

int main(void)
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
	startUp();
 2d8:	0e 94 75 01 	call	0x2ea	; 0x2ea <startUp>
	
	updateLoop();
 2dc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <updateLoop>
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <startUp>:

void startUp(void)
{
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
	//filterList = addFilterNode(filterList, createFilterNode(&binaryIn_process));
	//addFilterNode(filterList, createFilterNode(&binaryOut_process));
	
	setup_uart();
 2f2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <setup_uart>
	//print colored hallo welt
	//see http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	printf("\e[0;31mhallo welt");
 2f6:	89 e7       	ldi	r24, 0x79	; 121
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	89 2f       	mov	r24, r25
 2fc:	8f 93       	push	r24
 2fe:	89 e7       	ldi	r24, 0x79	; 121
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	8f 93       	push	r24
 304:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
	
	filterList = addFilterNode(filterList, createFilterNode(&analogIn_process));
 30c:	88 ea       	ldi	r24, 0xA8	; 168
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 b1 01 	call	0x362	; 0x362 <createFilterNode>
 314:	9c 01       	movw	r18, r24
 316:	80 91 8e 00 	lds	r24, 0x008E
 31a:	90 91 8f 00 	lds	r25, 0x008F
 31e:	b9 01       	movw	r22, r18
 320:	0e 94 28 01 	call	0x250	; 0x250 <addFilterNode>
 324:	90 93 8f 00 	sts	0x008F, r25
 328:	80 93 8e 00 	sts	0x008E, r24
	addFilterNode(filterList, createFilterNode(&analogCompare_process));
 32c:	89 e4       	ldi	r24, 0x49	; 73
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 b1 01 	call	0x362	; 0x362 <createFilterNode>
 334:	9c 01       	movw	r18, r24
 336:	80 91 8e 00 	lds	r24, 0x008E
 33a:	90 91 8f 00 	lds	r25, 0x008F
 33e:	b9 01       	movw	r22, r18
 340:	0e 94 28 01 	call	0x250	; 0x250 <addFilterNode>
	addFilterNode(filterList, createFilterNode(&binaryOut_process));
 344:	81 ef       	ldi	r24, 0xF1	; 241
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 b1 01 	call	0x362	; 0x362 <createFilterNode>
 34c:	9c 01       	movw	r18, r24
 34e:	80 91 8e 00 	lds	r24, 0x008E
 352:	90 91 8f 00 	lds	r25, 0x008F
 356:	b9 01       	movw	r22, r18
 358:	0e 94 28 01 	call	0x250	; 0x250 <addFilterNode>
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <createFilterNode>:

filterNode* createFilterNode(processMethodPointer processMethod)
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	00 d0       	rcall	.+0      	; 0x368 <createFilterNode+0x6>
 368:	00 d0       	rcall	.+0      	; 0x36a <createFilterNode+0x8>
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	9c 83       	std	Y+4, r25	; 0x04
 370:	8b 83       	std	Y+3, r24	; 0x03
	filterNode* newNode = (filterNode*) malloc(sizeof(filterNode));
 372:	84 e0       	ldi	r24, 0x04	; 4
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 3a 02 	call	0x474	; 0x474 <malloc>
 37a:	9a 83       	std	Y+2, r25	; 0x02
 37c:	89 83       	std	Y+1, r24	; 0x01
	newNode->processMethod = processMethod;
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	9a 81       	ldd	r25, Y+2	; 0x02
 382:	2b 81       	ldd	r18, Y+3	; 0x03
 384:	3c 81       	ldd	r19, Y+4	; 0x04
 386:	fc 01       	movw	r30, r24
 388:	31 83       	std	Z+1, r19	; 0x01
 38a:	20 83       	st	Z, r18
	newNode->next = NULL;
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	9a 81       	ldd	r25, Y+2	; 0x02
 390:	fc 01       	movw	r30, r24
 392:	13 82       	std	Z+3, r1	; 0x03
 394:	12 82       	std	Z+2, r1	; 0x02
	return newNode;
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	9a 81       	ldd	r25, Y+2	; 0x02
}
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <updateLoop>:

void updateLoop(void)
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <updateLoop+0x6>
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <updateLoop+0x8>
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
	void* arg = NULL;
 3b4:	1a 82       	std	Y+2, r1	; 0x02
 3b6:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		filterNode* current = filterList;
 3b8:	80 91 8e 00 	lds	r24, 0x008E
 3bc:	90 91 8f 00 	lds	r25, 0x008F
 3c0:	9c 83       	std	Y+4, r25	; 0x04
 3c2:	8b 83       	std	Y+3, r24	; 0x03

		while(current != NULL)
 3c4:	12 c0       	rjmp	.+36     	; 0x3ea <updateLoop+0x42>
		{
			arg = current->processMethod(arg);
 3c6:	8b 81       	ldd	r24, Y+3	; 0x03
 3c8:	9c 81       	ldd	r25, Y+4	; 0x04
 3ca:	fc 01       	movw	r30, r24
 3cc:	20 81       	ld	r18, Z
 3ce:	31 81       	ldd	r19, Z+1	; 0x01
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	9a 81       	ldd	r25, Y+2	; 0x02
 3d4:	f9 01       	movw	r30, r18
 3d6:	09 95       	icall
 3d8:	9a 83       	std	Y+2, r25	; 0x02
 3da:	89 83       	std	Y+1, r24	; 0x01
			current = current->next;
 3dc:	8b 81       	ldd	r24, Y+3	; 0x03
 3de:	9c 81       	ldd	r25, Y+4	; 0x04
 3e0:	fc 01       	movw	r30, r24
 3e2:	82 81       	ldd	r24, Z+2	; 0x02
 3e4:	93 81       	ldd	r25, Z+3	; 0x03
 3e6:	9c 83       	std	Y+4, r25	; 0x04
 3e8:	8b 83       	std	Y+3, r24	; 0x03
	void* arg = NULL;
	while(1)
	{
		filterNode* current = filterList;

		while(current != NULL)
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	9c 81       	ldd	r25, Y+4	; 0x04
 3ee:	00 97       	sbiw	r24, 0x00	; 0
 3f0:	51 f7       	brne	.-44     	; 0x3c6 <updateLoop+0x1e>
		{
			arg = current->processMethod(arg);
			current = current->next;
		}
	}
 3f2:	e2 cf       	rjmp	.-60     	; 0x3b8 <updateLoop+0x10>

000003f4 <setup_uart>:
#include "UART.h"
#include <stdio.h>
#include <avr/io.h>

void setup_uart()
{
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
	UBRRH = UBRR_VAL >> 8;
 3fc:	80 e4       	ldi	r24, 0x40	; 64
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	fc 01       	movw	r30, r24
 402:	10 82       	st	Z, r1
	UBRRL = UBRR_VAL & 0xFF;
 404:	89 e2       	ldi	r24, 0x29	; 41
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	27 e6       	ldi	r18, 0x67	; 103
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
 
	UCSRB |= (1<<TXEN);  // UART TX einschalten
 40e:	8a e2       	ldi	r24, 0x2A	; 42
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	2a e2       	ldi	r18, 0x2A	; 42
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	f9 01       	movw	r30, r18
 418:	20 81       	ld	r18, Z
 41a:	28 60       	ori	r18, 0x08	; 8
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);  // Asynchron 8N1
 420:	80 e4       	ldi	r24, 0x40	; 64
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	26 e8       	ldi	r18, 0x86	; 134
 426:	fc 01       	movw	r30, r24
 428:	20 83       	st	Z, r18
	
	static FILE mystdout = FDEV_SETUP_STREAM(uart_putc, NULL,_FDEV_SETUP_WRITE);

	stdout = &mystdout;
 42a:	86 e6       	ldi	r24, 0x66	; 102
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	90 93 97 00 	sts	0x0097, r25
 432:	80 93 96 00 	sts	0x0096, r24
}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <uart_putc>:

int uart_putc(unsigned char c)
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	1f 92       	push	r1
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1<<UDRE)))  /* warten bis Senden moeglich */
 448:	00 00       	nop
 44a:	8b e2       	ldi	r24, 0x2B	; 43
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	fc 01       	movw	r30, r24
 450:	80 81       	ld	r24, Z
 452:	88 2f       	mov	r24, r24
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	80 72       	andi	r24, 0x20	; 32
 458:	99 27       	eor	r25, r25
 45a:	00 97       	sbiw	r24, 0x00	; 0
 45c:	b1 f3       	breq	.-20     	; 0x44a <uart_putc+0xe>
	{
	}
	
	UDR = c;                      /* sende Zeichen */
 45e:	8c e2       	ldi	r24, 0x2C	; 44
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	29 81       	ldd	r18, Y+1	; 0x01
 464:	fc 01       	movw	r30, r24
 466:	20 83       	st	Z, r18
	return 0;
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
}
 46c:	0f 90       	pop	r0
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <malloc>:
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	82 30       	cpi	r24, 0x02	; 2
 47a:	91 05       	cpc	r25, r1
 47c:	10 f4       	brcc	.+4      	; 0x482 <malloc+0xe>
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	e0 91 92 00 	lds	r30, 0x0092
 486:	f0 91 93 00 	lds	r31, 0x0093
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	a0 e0       	ldi	r26, 0x00	; 0
 490:	b0 e0       	ldi	r27, 0x00	; 0
 492:	30 97       	sbiw	r30, 0x00	; 0
 494:	39 f1       	breq	.+78     	; 0x4e4 <malloc+0x70>
 496:	40 81       	ld	r20, Z
 498:	51 81       	ldd	r21, Z+1	; 0x01
 49a:	48 17       	cp	r20, r24
 49c:	59 07       	cpc	r21, r25
 49e:	b8 f0       	brcs	.+46     	; 0x4ce <malloc+0x5a>
 4a0:	48 17       	cp	r20, r24
 4a2:	59 07       	cpc	r21, r25
 4a4:	71 f4       	brne	.+28     	; 0x4c2 <malloc+0x4e>
 4a6:	82 81       	ldd	r24, Z+2	; 0x02
 4a8:	93 81       	ldd	r25, Z+3	; 0x03
 4aa:	10 97       	sbiw	r26, 0x00	; 0
 4ac:	29 f0       	breq	.+10     	; 0x4b8 <malloc+0x44>
 4ae:	13 96       	adiw	r26, 0x03	; 3
 4b0:	9c 93       	st	X, r25
 4b2:	8e 93       	st	-X, r24
 4b4:	12 97       	sbiw	r26, 0x02	; 2
 4b6:	2c c0       	rjmp	.+88     	; 0x510 <malloc+0x9c>
 4b8:	90 93 93 00 	sts	0x0093, r25
 4bc:	80 93 92 00 	sts	0x0092, r24
 4c0:	27 c0       	rjmp	.+78     	; 0x510 <malloc+0x9c>
 4c2:	21 15       	cp	r18, r1
 4c4:	31 05       	cpc	r19, r1
 4c6:	31 f0       	breq	.+12     	; 0x4d4 <malloc+0x60>
 4c8:	42 17       	cp	r20, r18
 4ca:	53 07       	cpc	r21, r19
 4cc:	18 f0       	brcs	.+6      	; 0x4d4 <malloc+0x60>
 4ce:	a9 01       	movw	r20, r18
 4d0:	db 01       	movw	r26, r22
 4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <malloc+0x62>
 4d4:	ef 01       	movw	r28, r30
 4d6:	9a 01       	movw	r18, r20
 4d8:	bd 01       	movw	r22, r26
 4da:	df 01       	movw	r26, r30
 4dc:	02 80       	ldd	r0, Z+2	; 0x02
 4de:	f3 81       	ldd	r31, Z+3	; 0x03
 4e0:	e0 2d       	mov	r30, r0
 4e2:	d7 cf       	rjmp	.-82     	; 0x492 <malloc+0x1e>
 4e4:	21 15       	cp	r18, r1
 4e6:	31 05       	cpc	r19, r1
 4e8:	f9 f0       	breq	.+62     	; 0x528 <malloc+0xb4>
 4ea:	28 1b       	sub	r18, r24
 4ec:	39 0b       	sbc	r19, r25
 4ee:	24 30       	cpi	r18, 0x04	; 4
 4f0:	31 05       	cpc	r19, r1
 4f2:	80 f4       	brcc	.+32     	; 0x514 <malloc+0xa0>
 4f4:	8a 81       	ldd	r24, Y+2	; 0x02
 4f6:	9b 81       	ldd	r25, Y+3	; 0x03
 4f8:	61 15       	cp	r22, r1
 4fa:	71 05       	cpc	r23, r1
 4fc:	21 f0       	breq	.+8      	; 0x506 <malloc+0x92>
 4fe:	fb 01       	movw	r30, r22
 500:	93 83       	std	Z+3, r25	; 0x03
 502:	82 83       	std	Z+2, r24	; 0x02
 504:	04 c0       	rjmp	.+8      	; 0x50e <malloc+0x9a>
 506:	90 93 93 00 	sts	0x0093, r25
 50a:	80 93 92 00 	sts	0x0092, r24
 50e:	fe 01       	movw	r30, r28
 510:	32 96       	adiw	r30, 0x02	; 2
 512:	44 c0       	rjmp	.+136    	; 0x59c <malloc+0x128>
 514:	fe 01       	movw	r30, r28
 516:	e2 0f       	add	r30, r18
 518:	f3 1f       	adc	r31, r19
 51a:	81 93       	st	Z+, r24
 51c:	91 93       	st	Z+, r25
 51e:	22 50       	subi	r18, 0x02	; 2
 520:	31 09       	sbc	r19, r1
 522:	39 83       	std	Y+1, r19	; 0x01
 524:	28 83       	st	Y, r18
 526:	3a c0       	rjmp	.+116    	; 0x59c <malloc+0x128>
 528:	20 91 90 00 	lds	r18, 0x0090
 52c:	30 91 91 00 	lds	r19, 0x0091
 530:	23 2b       	or	r18, r19
 532:	41 f4       	brne	.+16     	; 0x544 <malloc+0xd0>
 534:	20 91 62 00 	lds	r18, 0x0062
 538:	30 91 63 00 	lds	r19, 0x0063
 53c:	30 93 91 00 	sts	0x0091, r19
 540:	20 93 90 00 	sts	0x0090, r18
 544:	20 91 60 00 	lds	r18, 0x0060
 548:	30 91 61 00 	lds	r19, 0x0061
 54c:	21 15       	cp	r18, r1
 54e:	31 05       	cpc	r19, r1
 550:	41 f4       	brne	.+16     	; 0x562 <malloc+0xee>
 552:	2d b7       	in	r18, 0x3d	; 61
 554:	3e b7       	in	r19, 0x3e	; 62
 556:	40 91 64 00 	lds	r20, 0x0064
 55a:	50 91 65 00 	lds	r21, 0x0065
 55e:	24 1b       	sub	r18, r20
 560:	35 0b       	sbc	r19, r21
 562:	e0 91 90 00 	lds	r30, 0x0090
 566:	f0 91 91 00 	lds	r31, 0x0091
 56a:	e2 17       	cp	r30, r18
 56c:	f3 07       	cpc	r31, r19
 56e:	a0 f4       	brcc	.+40     	; 0x598 <malloc+0x124>
 570:	2e 1b       	sub	r18, r30
 572:	3f 0b       	sbc	r19, r31
 574:	28 17       	cp	r18, r24
 576:	39 07       	cpc	r19, r25
 578:	78 f0       	brcs	.+30     	; 0x598 <malloc+0x124>
 57a:	ac 01       	movw	r20, r24
 57c:	4e 5f       	subi	r20, 0xFE	; 254
 57e:	5f 4f       	sbci	r21, 0xFF	; 255
 580:	24 17       	cp	r18, r20
 582:	35 07       	cpc	r19, r21
 584:	48 f0       	brcs	.+18     	; 0x598 <malloc+0x124>
 586:	4e 0f       	add	r20, r30
 588:	5f 1f       	adc	r21, r31
 58a:	50 93 91 00 	sts	0x0091, r21
 58e:	40 93 90 00 	sts	0x0090, r20
 592:	81 93       	st	Z+, r24
 594:	91 93       	st	Z+, r25
 596:	02 c0       	rjmp	.+4      	; 0x59c <malloc+0x128>
 598:	e0 e0       	ldi	r30, 0x00	; 0
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	cf 01       	movw	r24, r30
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <free>:
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	00 97       	sbiw	r24, 0x00	; 0
 5aa:	09 f4       	brne	.+2      	; 0x5ae <free+0xa>
 5ac:	87 c0       	rjmp	.+270    	; 0x6bc <free+0x118>
 5ae:	fc 01       	movw	r30, r24
 5b0:	32 97       	sbiw	r30, 0x02	; 2
 5b2:	13 82       	std	Z+3, r1	; 0x03
 5b4:	12 82       	std	Z+2, r1	; 0x02
 5b6:	c0 91 92 00 	lds	r28, 0x0092
 5ba:	d0 91 93 00 	lds	r29, 0x0093
 5be:	20 97       	sbiw	r28, 0x00	; 0
 5c0:	81 f4       	brne	.+32     	; 0x5e2 <free+0x3e>
 5c2:	20 81       	ld	r18, Z
 5c4:	31 81       	ldd	r19, Z+1	; 0x01
 5c6:	28 0f       	add	r18, r24
 5c8:	39 1f       	adc	r19, r25
 5ca:	80 91 90 00 	lds	r24, 0x0090
 5ce:	90 91 91 00 	lds	r25, 0x0091
 5d2:	82 17       	cp	r24, r18
 5d4:	93 07       	cpc	r25, r19
 5d6:	79 f5       	brne	.+94     	; 0x636 <free+0x92>
 5d8:	f0 93 91 00 	sts	0x0091, r31
 5dc:	e0 93 90 00 	sts	0x0090, r30
 5e0:	6d c0       	rjmp	.+218    	; 0x6bc <free+0x118>
 5e2:	de 01       	movw	r26, r28
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	ae 17       	cp	r26, r30
 5ea:	bf 07       	cpc	r27, r31
 5ec:	50 f4       	brcc	.+20     	; 0x602 <free+0x5e>
 5ee:	12 96       	adiw	r26, 0x02	; 2
 5f0:	4d 91       	ld	r20, X+
 5f2:	5c 91       	ld	r21, X
 5f4:	13 97       	sbiw	r26, 0x03	; 3
 5f6:	9d 01       	movw	r18, r26
 5f8:	41 15       	cp	r20, r1
 5fa:	51 05       	cpc	r21, r1
 5fc:	09 f1       	breq	.+66     	; 0x640 <free+0x9c>
 5fe:	da 01       	movw	r26, r20
 600:	f3 cf       	rjmp	.-26     	; 0x5e8 <free+0x44>
 602:	b3 83       	std	Z+3, r27	; 0x03
 604:	a2 83       	std	Z+2, r26	; 0x02
 606:	40 81       	ld	r20, Z
 608:	51 81       	ldd	r21, Z+1	; 0x01
 60a:	84 0f       	add	r24, r20
 60c:	95 1f       	adc	r25, r21
 60e:	8a 17       	cp	r24, r26
 610:	9b 07       	cpc	r25, r27
 612:	71 f4       	brne	.+28     	; 0x630 <free+0x8c>
 614:	8d 91       	ld	r24, X+
 616:	9c 91       	ld	r25, X
 618:	11 97       	sbiw	r26, 0x01	; 1
 61a:	84 0f       	add	r24, r20
 61c:	95 1f       	adc	r25, r21
 61e:	02 96       	adiw	r24, 0x02	; 2
 620:	91 83       	std	Z+1, r25	; 0x01
 622:	80 83       	st	Z, r24
 624:	12 96       	adiw	r26, 0x02	; 2
 626:	8d 91       	ld	r24, X+
 628:	9c 91       	ld	r25, X
 62a:	13 97       	sbiw	r26, 0x03	; 3
 62c:	93 83       	std	Z+3, r25	; 0x03
 62e:	82 83       	std	Z+2, r24	; 0x02
 630:	21 15       	cp	r18, r1
 632:	31 05       	cpc	r19, r1
 634:	29 f4       	brne	.+10     	; 0x640 <free+0x9c>
 636:	f0 93 93 00 	sts	0x0093, r31
 63a:	e0 93 92 00 	sts	0x0092, r30
 63e:	3e c0       	rjmp	.+124    	; 0x6bc <free+0x118>
 640:	d9 01       	movw	r26, r18
 642:	13 96       	adiw	r26, 0x03	; 3
 644:	fc 93       	st	X, r31
 646:	ee 93       	st	-X, r30
 648:	12 97       	sbiw	r26, 0x02	; 2
 64a:	4d 91       	ld	r20, X+
 64c:	5d 91       	ld	r21, X+
 64e:	a4 0f       	add	r26, r20
 650:	b5 1f       	adc	r27, r21
 652:	ea 17       	cp	r30, r26
 654:	fb 07       	cpc	r31, r27
 656:	79 f4       	brne	.+30     	; 0x676 <free+0xd2>
 658:	80 81       	ld	r24, Z
 65a:	91 81       	ldd	r25, Z+1	; 0x01
 65c:	84 0f       	add	r24, r20
 65e:	95 1f       	adc	r25, r21
 660:	02 96       	adiw	r24, 0x02	; 2
 662:	d9 01       	movw	r26, r18
 664:	11 96       	adiw	r26, 0x01	; 1
 666:	9c 93       	st	X, r25
 668:	8e 93       	st	-X, r24
 66a:	82 81       	ldd	r24, Z+2	; 0x02
 66c:	93 81       	ldd	r25, Z+3	; 0x03
 66e:	13 96       	adiw	r26, 0x03	; 3
 670:	9c 93       	st	X, r25
 672:	8e 93       	st	-X, r24
 674:	12 97       	sbiw	r26, 0x02	; 2
 676:	e0 e0       	ldi	r30, 0x00	; 0
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	8a 81       	ldd	r24, Y+2	; 0x02
 67c:	9b 81       	ldd	r25, Y+3	; 0x03
 67e:	00 97       	sbiw	r24, 0x00	; 0
 680:	19 f0       	breq	.+6      	; 0x688 <free+0xe4>
 682:	fe 01       	movw	r30, r28
 684:	ec 01       	movw	r28, r24
 686:	f9 cf       	rjmp	.-14     	; 0x67a <free+0xd6>
 688:	ce 01       	movw	r24, r28
 68a:	02 96       	adiw	r24, 0x02	; 2
 68c:	28 81       	ld	r18, Y
 68e:	39 81       	ldd	r19, Y+1	; 0x01
 690:	82 0f       	add	r24, r18
 692:	93 1f       	adc	r25, r19
 694:	20 91 90 00 	lds	r18, 0x0090
 698:	30 91 91 00 	lds	r19, 0x0091
 69c:	28 17       	cp	r18, r24
 69e:	39 07       	cpc	r19, r25
 6a0:	69 f4       	brne	.+26     	; 0x6bc <free+0x118>
 6a2:	30 97       	sbiw	r30, 0x00	; 0
 6a4:	29 f4       	brne	.+10     	; 0x6b0 <free+0x10c>
 6a6:	10 92 93 00 	sts	0x0093, r1
 6aa:	10 92 92 00 	sts	0x0092, r1
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <free+0x110>
 6b0:	13 82       	std	Z+3, r1	; 0x03
 6b2:	12 82       	std	Z+2, r1	; 0x02
 6b4:	d0 93 91 00 	sts	0x0091, r29
 6b8:	c0 93 90 00 	sts	0x0090, r28
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <printf>:
 6c2:	a0 e0       	ldi	r26, 0x00	; 0
 6c4:	b0 e0       	ldi	r27, 0x00	; 0
 6c6:	e7 e6       	ldi	r30, 0x67	; 103
 6c8:	f3 e0       	ldi	r31, 0x03	; 3
 6ca:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__prologue_saves__+0x20>
 6ce:	fe 01       	movw	r30, r28
 6d0:	35 96       	adiw	r30, 0x05	; 5
 6d2:	61 91       	ld	r22, Z+
 6d4:	71 91       	ld	r23, Z+
 6d6:	af 01       	movw	r20, r30
 6d8:	80 91 96 00 	lds	r24, 0x0096
 6dc:	90 91 97 00 	lds	r25, 0x0097
 6e0:	0e 94 75 03 	call	0x6ea	; 0x6ea <vfprintf>
 6e4:	e2 e0       	ldi	r30, 0x02	; 2
 6e6:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__epilogue_restores__+0x20>

000006ea <vfprintf>:
 6ea:	ac e0       	ldi	r26, 0x0C	; 12
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	eb e7       	ldi	r30, 0x7B	; 123
 6f0:	f3 e0       	ldi	r31, 0x03	; 3
 6f2:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__prologue_saves__>
 6f6:	7c 01       	movw	r14, r24
 6f8:	6b 01       	movw	r12, r22
 6fa:	8a 01       	movw	r16, r20
 6fc:	fc 01       	movw	r30, r24
 6fe:	17 82       	std	Z+7, r1	; 0x07
 700:	16 82       	std	Z+6, r1	; 0x06
 702:	83 81       	ldd	r24, Z+3	; 0x03
 704:	81 ff       	sbrs	r24, 1
 706:	bd c1       	rjmp	.+890    	; 0xa82 <__stack+0x223>
 708:	ce 01       	movw	r24, r28
 70a:	01 96       	adiw	r24, 0x01	; 1
 70c:	4c 01       	movw	r8, r24
 70e:	f7 01       	movw	r30, r14
 710:	93 81       	ldd	r25, Z+3	; 0x03
 712:	f6 01       	movw	r30, r12
 714:	93 fd       	sbrc	r25, 3
 716:	85 91       	lpm	r24, Z+
 718:	93 ff       	sbrs	r25, 3
 71a:	81 91       	ld	r24, Z+
 71c:	6f 01       	movw	r12, r30
 71e:	88 23       	and	r24, r24
 720:	09 f4       	brne	.+2      	; 0x724 <vfprintf+0x3a>
 722:	ab c1       	rjmp	.+854    	; 0xa7a <__stack+0x21b>
 724:	85 32       	cpi	r24, 0x25	; 37
 726:	39 f4       	brne	.+14     	; 0x736 <vfprintf+0x4c>
 728:	93 fd       	sbrc	r25, 3
 72a:	85 91       	lpm	r24, Z+
 72c:	93 ff       	sbrs	r25, 3
 72e:	81 91       	ld	r24, Z+
 730:	6f 01       	movw	r12, r30
 732:	85 32       	cpi	r24, 0x25	; 37
 734:	29 f4       	brne	.+10     	; 0x740 <vfprintf+0x56>
 736:	b7 01       	movw	r22, r14
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 5d 05 	call	0xaba	; 0xaba <fputc>
 73e:	e7 cf       	rjmp	.-50     	; 0x70e <vfprintf+0x24>
 740:	51 2c       	mov	r5, r1
 742:	31 2c       	mov	r3, r1
 744:	20 e0       	ldi	r18, 0x00	; 0
 746:	20 32       	cpi	r18, 0x20	; 32
 748:	a0 f4       	brcc	.+40     	; 0x772 <vfprintf+0x88>
 74a:	8b 32       	cpi	r24, 0x2B	; 43
 74c:	69 f0       	breq	.+26     	; 0x768 <vfprintf+0x7e>
 74e:	30 f4       	brcc	.+12     	; 0x75c <vfprintf+0x72>
 750:	80 32       	cpi	r24, 0x20	; 32
 752:	59 f0       	breq	.+22     	; 0x76a <vfprintf+0x80>
 754:	83 32       	cpi	r24, 0x23	; 35
 756:	69 f4       	brne	.+26     	; 0x772 <vfprintf+0x88>
 758:	20 61       	ori	r18, 0x10	; 16
 75a:	2c c0       	rjmp	.+88     	; 0x7b4 <vfprintf+0xca>
 75c:	8d 32       	cpi	r24, 0x2D	; 45
 75e:	39 f0       	breq	.+14     	; 0x76e <vfprintf+0x84>
 760:	80 33       	cpi	r24, 0x30	; 48
 762:	39 f4       	brne	.+14     	; 0x772 <vfprintf+0x88>
 764:	21 60       	ori	r18, 0x01	; 1
 766:	26 c0       	rjmp	.+76     	; 0x7b4 <vfprintf+0xca>
 768:	22 60       	ori	r18, 0x02	; 2
 76a:	24 60       	ori	r18, 0x04	; 4
 76c:	23 c0       	rjmp	.+70     	; 0x7b4 <vfprintf+0xca>
 76e:	28 60       	ori	r18, 0x08	; 8
 770:	21 c0       	rjmp	.+66     	; 0x7b4 <vfprintf+0xca>
 772:	27 fd       	sbrc	r18, 7
 774:	27 c0       	rjmp	.+78     	; 0x7c4 <vfprintf+0xda>
 776:	30 ed       	ldi	r19, 0xD0	; 208
 778:	38 0f       	add	r19, r24
 77a:	3a 30       	cpi	r19, 0x0A	; 10
 77c:	78 f4       	brcc	.+30     	; 0x79c <vfprintf+0xb2>
 77e:	26 ff       	sbrs	r18, 6
 780:	06 c0       	rjmp	.+12     	; 0x78e <vfprintf+0xa4>
 782:	fa e0       	ldi	r31, 0x0A	; 10
 784:	5f 9e       	mul	r5, r31
 786:	30 0d       	add	r19, r0
 788:	11 24       	eor	r1, r1
 78a:	53 2e       	mov	r5, r19
 78c:	13 c0       	rjmp	.+38     	; 0x7b4 <vfprintf+0xca>
 78e:	8a e0       	ldi	r24, 0x0A	; 10
 790:	38 9e       	mul	r3, r24
 792:	30 0d       	add	r19, r0
 794:	11 24       	eor	r1, r1
 796:	33 2e       	mov	r3, r19
 798:	20 62       	ori	r18, 0x20	; 32
 79a:	0c c0       	rjmp	.+24     	; 0x7b4 <vfprintf+0xca>
 79c:	8e 32       	cpi	r24, 0x2E	; 46
 79e:	21 f4       	brne	.+8      	; 0x7a8 <vfprintf+0xbe>
 7a0:	26 fd       	sbrc	r18, 6
 7a2:	6b c1       	rjmp	.+726    	; 0xa7a <__stack+0x21b>
 7a4:	20 64       	ori	r18, 0x40	; 64
 7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <vfprintf+0xca>
 7a8:	8c 36       	cpi	r24, 0x6C	; 108
 7aa:	11 f4       	brne	.+4      	; 0x7b0 <vfprintf+0xc6>
 7ac:	20 68       	ori	r18, 0x80	; 128
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <vfprintf+0xca>
 7b0:	88 36       	cpi	r24, 0x68	; 104
 7b2:	41 f4       	brne	.+16     	; 0x7c4 <vfprintf+0xda>
 7b4:	f6 01       	movw	r30, r12
 7b6:	93 fd       	sbrc	r25, 3
 7b8:	85 91       	lpm	r24, Z+
 7ba:	93 ff       	sbrs	r25, 3
 7bc:	81 91       	ld	r24, Z+
 7be:	6f 01       	movw	r12, r30
 7c0:	81 11       	cpse	r24, r1
 7c2:	c1 cf       	rjmp	.-126    	; 0x746 <vfprintf+0x5c>
 7c4:	98 2f       	mov	r25, r24
 7c6:	9f 7d       	andi	r25, 0xDF	; 223
 7c8:	95 54       	subi	r25, 0x45	; 69
 7ca:	93 30       	cpi	r25, 0x03	; 3
 7cc:	28 f4       	brcc	.+10     	; 0x7d8 <vfprintf+0xee>
 7ce:	0c 5f       	subi	r16, 0xFC	; 252
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
 7d2:	ff e3       	ldi	r31, 0x3F	; 63
 7d4:	f9 83       	std	Y+1, r31	; 0x01
 7d6:	0d c0       	rjmp	.+26     	; 0x7f2 <vfprintf+0x108>
 7d8:	83 36       	cpi	r24, 0x63	; 99
 7da:	31 f0       	breq	.+12     	; 0x7e8 <vfprintf+0xfe>
 7dc:	83 37       	cpi	r24, 0x73	; 115
 7de:	71 f0       	breq	.+28     	; 0x7fc <vfprintf+0x112>
 7e0:	83 35       	cpi	r24, 0x53	; 83
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <vfprintf+0xfc>
 7e4:	5b c0       	rjmp	.+182    	; 0x89c <__stack+0x3d>
 7e6:	22 c0       	rjmp	.+68     	; 0x82c <vfprintf+0x142>
 7e8:	f8 01       	movw	r30, r16
 7ea:	80 81       	ld	r24, Z
 7ec:	89 83       	std	Y+1, r24	; 0x01
 7ee:	0e 5f       	subi	r16, 0xFE	; 254
 7f0:	1f 4f       	sbci	r17, 0xFF	; 255
 7f2:	44 24       	eor	r4, r4
 7f4:	43 94       	inc	r4
 7f6:	51 2c       	mov	r5, r1
 7f8:	54 01       	movw	r10, r8
 7fa:	15 c0       	rjmp	.+42     	; 0x826 <vfprintf+0x13c>
 7fc:	38 01       	movw	r6, r16
 7fe:	f2 e0       	ldi	r31, 0x02	; 2
 800:	6f 0e       	add	r6, r31
 802:	71 1c       	adc	r7, r1
 804:	f8 01       	movw	r30, r16
 806:	a0 80       	ld	r10, Z
 808:	b1 80       	ldd	r11, Z+1	; 0x01
 80a:	26 ff       	sbrs	r18, 6
 80c:	03 c0       	rjmp	.+6      	; 0x814 <vfprintf+0x12a>
 80e:	65 2d       	mov	r22, r5
 810:	70 e0       	ldi	r23, 0x00	; 0
 812:	02 c0       	rjmp	.+4      	; 0x818 <vfprintf+0x12e>
 814:	6f ef       	ldi	r22, 0xFF	; 255
 816:	7f ef       	ldi	r23, 0xFF	; 255
 818:	c5 01       	movw	r24, r10
 81a:	2c 87       	std	Y+12, r18	; 0x0c
 81c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <strnlen>
 820:	2c 01       	movw	r4, r24
 822:	83 01       	movw	r16, r6
 824:	2c 85       	ldd	r18, Y+12	; 0x0c
 826:	2f 77       	andi	r18, 0x7F	; 127
 828:	22 2e       	mov	r2, r18
 82a:	17 c0       	rjmp	.+46     	; 0x85a <vfprintf+0x170>
 82c:	38 01       	movw	r6, r16
 82e:	f2 e0       	ldi	r31, 0x02	; 2
 830:	6f 0e       	add	r6, r31
 832:	71 1c       	adc	r7, r1
 834:	f8 01       	movw	r30, r16
 836:	a0 80       	ld	r10, Z
 838:	b1 80       	ldd	r11, Z+1	; 0x01
 83a:	26 ff       	sbrs	r18, 6
 83c:	03 c0       	rjmp	.+6      	; 0x844 <vfprintf+0x15a>
 83e:	65 2d       	mov	r22, r5
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	02 c0       	rjmp	.+4      	; 0x848 <vfprintf+0x15e>
 844:	6f ef       	ldi	r22, 0xFF	; 255
 846:	7f ef       	ldi	r23, 0xFF	; 255
 848:	c5 01       	movw	r24, r10
 84a:	2c 87       	std	Y+12, r18	; 0x0c
 84c:	0e 94 47 05 	call	0xa8e	; 0xa8e <strnlen_P>
 850:	2c 01       	movw	r4, r24
 852:	2c 85       	ldd	r18, Y+12	; 0x0c
 854:	20 68       	ori	r18, 0x80	; 128
 856:	22 2e       	mov	r2, r18
 858:	83 01       	movw	r16, r6
 85a:	23 fc       	sbrc	r2, 3
 85c:	1b c0       	rjmp	.+54     	; 0x894 <__stack+0x35>
 85e:	83 2d       	mov	r24, r3
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	48 16       	cp	r4, r24
 864:	59 06       	cpc	r5, r25
 866:	b0 f4       	brcc	.+44     	; 0x894 <__stack+0x35>
 868:	b7 01       	movw	r22, r14
 86a:	80 e2       	ldi	r24, 0x20	; 32
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 5d 05 	call	0xaba	; 0xaba <fputc>
 872:	3a 94       	dec	r3
 874:	f4 cf       	rjmp	.-24     	; 0x85e <vfprintf+0x174>
 876:	f5 01       	movw	r30, r10
 878:	27 fc       	sbrc	r2, 7
 87a:	85 91       	lpm	r24, Z+
 87c:	27 fe       	sbrs	r2, 7
 87e:	81 91       	ld	r24, Z+
 880:	5f 01       	movw	r10, r30
 882:	b7 01       	movw	r22, r14
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 5d 05 	call	0xaba	; 0xaba <fputc>
 88a:	31 10       	cpse	r3, r1
 88c:	3a 94       	dec	r3
 88e:	f1 e0       	ldi	r31, 0x01	; 1
 890:	4f 1a       	sub	r4, r31
 892:	51 08       	sbc	r5, r1
 894:	41 14       	cp	r4, r1
 896:	51 04       	cpc	r5, r1
 898:	71 f7       	brne	.-36     	; 0x876 <__stack+0x17>
 89a:	e5 c0       	rjmp	.+458    	; 0xa66 <__stack+0x207>
 89c:	84 36       	cpi	r24, 0x64	; 100
 89e:	11 f0       	breq	.+4      	; 0x8a4 <__stack+0x45>
 8a0:	89 36       	cpi	r24, 0x69	; 105
 8a2:	39 f5       	brne	.+78     	; 0x8f2 <__stack+0x93>
 8a4:	f8 01       	movw	r30, r16
 8a6:	27 ff       	sbrs	r18, 7
 8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <__stack+0x59>
 8aa:	60 81       	ld	r22, Z
 8ac:	71 81       	ldd	r23, Z+1	; 0x01
 8ae:	82 81       	ldd	r24, Z+2	; 0x02
 8b0:	93 81       	ldd	r25, Z+3	; 0x03
 8b2:	0c 5f       	subi	r16, 0xFC	; 252
 8b4:	1f 4f       	sbci	r17, 0xFF	; 255
 8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <__stack+0x69>
 8b8:	60 81       	ld	r22, Z
 8ba:	71 81       	ldd	r23, Z+1	; 0x01
 8bc:	88 27       	eor	r24, r24
 8be:	77 fd       	sbrc	r23, 7
 8c0:	80 95       	com	r24
 8c2:	98 2f       	mov	r25, r24
 8c4:	0e 5f       	subi	r16, 0xFE	; 254
 8c6:	1f 4f       	sbci	r17, 0xFF	; 255
 8c8:	2f 76       	andi	r18, 0x6F	; 111
 8ca:	b2 2e       	mov	r11, r18
 8cc:	97 ff       	sbrs	r25, 7
 8ce:	09 c0       	rjmp	.+18     	; 0x8e2 <__stack+0x83>
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	20 68       	ori	r18, 0x80	; 128
 8e0:	b2 2e       	mov	r11, r18
 8e2:	2a e0       	ldi	r18, 0x0A	; 10
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	a4 01       	movw	r20, r8
 8e8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__ultoa_invert>
 8ec:	a8 2e       	mov	r10, r24
 8ee:	a8 18       	sub	r10, r8
 8f0:	44 c0       	rjmp	.+136    	; 0x97a <__stack+0x11b>
 8f2:	85 37       	cpi	r24, 0x75	; 117
 8f4:	29 f4       	brne	.+10     	; 0x900 <__stack+0xa1>
 8f6:	2f 7e       	andi	r18, 0xEF	; 239
 8f8:	b2 2e       	mov	r11, r18
 8fa:	2a e0       	ldi	r18, 0x0A	; 10
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	25 c0       	rjmp	.+74     	; 0x94a <__stack+0xeb>
 900:	f2 2f       	mov	r31, r18
 902:	f9 7f       	andi	r31, 0xF9	; 249
 904:	bf 2e       	mov	r11, r31
 906:	8f 36       	cpi	r24, 0x6F	; 111
 908:	c1 f0       	breq	.+48     	; 0x93a <__stack+0xdb>
 90a:	18 f4       	brcc	.+6      	; 0x912 <__stack+0xb3>
 90c:	88 35       	cpi	r24, 0x58	; 88
 90e:	79 f0       	breq	.+30     	; 0x92e <__stack+0xcf>
 910:	b4 c0       	rjmp	.+360    	; 0xa7a <__stack+0x21b>
 912:	80 37       	cpi	r24, 0x70	; 112
 914:	19 f0       	breq	.+6      	; 0x91c <__stack+0xbd>
 916:	88 37       	cpi	r24, 0x78	; 120
 918:	21 f0       	breq	.+8      	; 0x922 <__stack+0xc3>
 91a:	af c0       	rjmp	.+350    	; 0xa7a <__stack+0x21b>
 91c:	2f 2f       	mov	r18, r31
 91e:	20 61       	ori	r18, 0x10	; 16
 920:	b2 2e       	mov	r11, r18
 922:	b4 fe       	sbrs	r11, 4
 924:	0d c0       	rjmp	.+26     	; 0x940 <__stack+0xe1>
 926:	8b 2d       	mov	r24, r11
 928:	84 60       	ori	r24, 0x04	; 4
 92a:	b8 2e       	mov	r11, r24
 92c:	09 c0       	rjmp	.+18     	; 0x940 <__stack+0xe1>
 92e:	24 ff       	sbrs	r18, 4
 930:	0a c0       	rjmp	.+20     	; 0x946 <__stack+0xe7>
 932:	9f 2f       	mov	r25, r31
 934:	96 60       	ori	r25, 0x06	; 6
 936:	b9 2e       	mov	r11, r25
 938:	06 c0       	rjmp	.+12     	; 0x946 <__stack+0xe7>
 93a:	28 e0       	ldi	r18, 0x08	; 8
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	05 c0       	rjmp	.+10     	; 0x94a <__stack+0xeb>
 940:	20 e1       	ldi	r18, 0x10	; 16
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0xeb>
 946:	20 e1       	ldi	r18, 0x10	; 16
 948:	32 e0       	ldi	r19, 0x02	; 2
 94a:	f8 01       	movw	r30, r16
 94c:	b7 fe       	sbrs	r11, 7
 94e:	07 c0       	rjmp	.+14     	; 0x95e <__stack+0xff>
 950:	60 81       	ld	r22, Z
 952:	71 81       	ldd	r23, Z+1	; 0x01
 954:	82 81       	ldd	r24, Z+2	; 0x02
 956:	93 81       	ldd	r25, Z+3	; 0x03
 958:	0c 5f       	subi	r16, 0xFC	; 252
 95a:	1f 4f       	sbci	r17, 0xFF	; 255
 95c:	06 c0       	rjmp	.+12     	; 0x96a <__stack+0x10b>
 95e:	60 81       	ld	r22, Z
 960:	71 81       	ldd	r23, Z+1	; 0x01
 962:	80 e0       	ldi	r24, 0x00	; 0
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	0e 5f       	subi	r16, 0xFE	; 254
 968:	1f 4f       	sbci	r17, 0xFF	; 255
 96a:	a4 01       	movw	r20, r8
 96c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__ultoa_invert>
 970:	a8 2e       	mov	r10, r24
 972:	a8 18       	sub	r10, r8
 974:	fb 2d       	mov	r31, r11
 976:	ff 77       	andi	r31, 0x7F	; 127
 978:	bf 2e       	mov	r11, r31
 97a:	b6 fe       	sbrs	r11, 6
 97c:	0b c0       	rjmp	.+22     	; 0x994 <__stack+0x135>
 97e:	2b 2d       	mov	r18, r11
 980:	2e 7f       	andi	r18, 0xFE	; 254
 982:	a5 14       	cp	r10, r5
 984:	50 f4       	brcc	.+20     	; 0x99a <__stack+0x13b>
 986:	b4 fe       	sbrs	r11, 4
 988:	0a c0       	rjmp	.+20     	; 0x99e <__stack+0x13f>
 98a:	b2 fc       	sbrc	r11, 2
 98c:	08 c0       	rjmp	.+16     	; 0x99e <__stack+0x13f>
 98e:	2b 2d       	mov	r18, r11
 990:	2e 7e       	andi	r18, 0xEE	; 238
 992:	05 c0       	rjmp	.+10     	; 0x99e <__stack+0x13f>
 994:	7a 2c       	mov	r7, r10
 996:	2b 2d       	mov	r18, r11
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <__stack+0x141>
 99a:	7a 2c       	mov	r7, r10
 99c:	01 c0       	rjmp	.+2      	; 0x9a0 <__stack+0x141>
 99e:	75 2c       	mov	r7, r5
 9a0:	24 ff       	sbrs	r18, 4
 9a2:	0d c0       	rjmp	.+26     	; 0x9be <__stack+0x15f>
 9a4:	fe 01       	movw	r30, r28
 9a6:	ea 0d       	add	r30, r10
 9a8:	f1 1d       	adc	r31, r1
 9aa:	80 81       	ld	r24, Z
 9ac:	80 33       	cpi	r24, 0x30	; 48
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <__stack+0x155>
 9b0:	29 7e       	andi	r18, 0xE9	; 233
 9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <__stack+0x167>
 9b4:	22 ff       	sbrs	r18, 2
 9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <__stack+0x165>
 9b8:	73 94       	inc	r7
 9ba:	73 94       	inc	r7
 9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <__stack+0x167>
 9be:	82 2f       	mov	r24, r18
 9c0:	86 78       	andi	r24, 0x86	; 134
 9c2:	09 f0       	breq	.+2      	; 0x9c6 <__stack+0x167>
 9c4:	73 94       	inc	r7
 9c6:	23 fd       	sbrc	r18, 3
 9c8:	13 c0       	rjmp	.+38     	; 0x9f0 <__stack+0x191>
 9ca:	20 ff       	sbrs	r18, 0
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <__stack+0x17b>
 9ce:	5a 2c       	mov	r5, r10
 9d0:	73 14       	cp	r7, r3
 9d2:	18 f4       	brcc	.+6      	; 0x9da <__stack+0x17b>
 9d4:	53 0c       	add	r5, r3
 9d6:	57 18       	sub	r5, r7
 9d8:	73 2c       	mov	r7, r3
 9da:	73 14       	cp	r7, r3
 9dc:	68 f4       	brcc	.+26     	; 0x9f8 <__stack+0x199>
 9de:	b7 01       	movw	r22, r14
 9e0:	80 e2       	ldi	r24, 0x20	; 32
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	2c 87       	std	Y+12, r18	; 0x0c
 9e6:	0e 94 5d 05 	call	0xaba	; 0xaba <fputc>
 9ea:	73 94       	inc	r7
 9ec:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ee:	f5 cf       	rjmp	.-22     	; 0x9da <__stack+0x17b>
 9f0:	73 14       	cp	r7, r3
 9f2:	10 f4       	brcc	.+4      	; 0x9f8 <__stack+0x199>
 9f4:	37 18       	sub	r3, r7
 9f6:	01 c0       	rjmp	.+2      	; 0x9fa <__stack+0x19b>
 9f8:	31 2c       	mov	r3, r1
 9fa:	24 ff       	sbrs	r18, 4
 9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__stack+0x1c3>
 9fe:	b7 01       	movw	r22, r14
 a00:	80 e3       	ldi	r24, 0x30	; 48
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	2c 87       	std	Y+12, r18	; 0x0c
 a06:	0e 94 5d 05 	call	0xaba	; 0xaba <fputc>
 a0a:	2c 85       	ldd	r18, Y+12	; 0x0c
 a0c:	22 ff       	sbrs	r18, 2
 a0e:	17 c0       	rjmp	.+46     	; 0xa3e <__stack+0x1df>
 a10:	21 ff       	sbrs	r18, 1
 a12:	03 c0       	rjmp	.+6      	; 0xa1a <__stack+0x1bb>
 a14:	88 e5       	ldi	r24, 0x58	; 88
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	02 c0       	rjmp	.+4      	; 0xa1e <__stack+0x1bf>
 a1a:	88 e7       	ldi	r24, 0x78	; 120
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	b7 01       	movw	r22, r14
 a20:	0c c0       	rjmp	.+24     	; 0xa3a <__stack+0x1db>
 a22:	82 2f       	mov	r24, r18
 a24:	86 78       	andi	r24, 0x86	; 134
 a26:	59 f0       	breq	.+22     	; 0xa3e <__stack+0x1df>
 a28:	21 fd       	sbrc	r18, 1
 a2a:	02 c0       	rjmp	.+4      	; 0xa30 <__stack+0x1d1>
 a2c:	80 e2       	ldi	r24, 0x20	; 32
 a2e:	01 c0       	rjmp	.+2      	; 0xa32 <__stack+0x1d3>
 a30:	8b e2       	ldi	r24, 0x2B	; 43
 a32:	27 fd       	sbrc	r18, 7
 a34:	8d e2       	ldi	r24, 0x2D	; 45
 a36:	b7 01       	movw	r22, r14
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0e 94 5d 05 	call	0xaba	; 0xaba <fputc>
 a3e:	a5 14       	cp	r10, r5
 a40:	38 f4       	brcc	.+14     	; 0xa50 <__stack+0x1f1>
 a42:	b7 01       	movw	r22, r14
 a44:	80 e3       	ldi	r24, 0x30	; 48
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 5d 05 	call	0xaba	; 0xaba <fputc>
 a4c:	5a 94       	dec	r5
 a4e:	f7 cf       	rjmp	.-18     	; 0xa3e <__stack+0x1df>
 a50:	aa 94       	dec	r10
 a52:	f4 01       	movw	r30, r8
 a54:	ea 0d       	add	r30, r10
 a56:	f1 1d       	adc	r31, r1
 a58:	80 81       	ld	r24, Z
 a5a:	b7 01       	movw	r22, r14
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 5d 05 	call	0xaba	; 0xaba <fputc>
 a62:	a1 10       	cpse	r10, r1
 a64:	f5 cf       	rjmp	.-22     	; 0xa50 <__stack+0x1f1>
 a66:	33 20       	and	r3, r3
 a68:	09 f4       	brne	.+2      	; 0xa6c <__stack+0x20d>
 a6a:	51 ce       	rjmp	.-862    	; 0x70e <vfprintf+0x24>
 a6c:	b7 01       	movw	r22, r14
 a6e:	80 e2       	ldi	r24, 0x20	; 32
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 5d 05 	call	0xaba	; 0xaba <fputc>
 a76:	3a 94       	dec	r3
 a78:	f6 cf       	rjmp	.-20     	; 0xa66 <__stack+0x207>
 a7a:	f7 01       	movw	r30, r14
 a7c:	86 81       	ldd	r24, Z+6	; 0x06
 a7e:	97 81       	ldd	r25, Z+7	; 0x07
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <__stack+0x227>
 a82:	8f ef       	ldi	r24, 0xFF	; 255
 a84:	9f ef       	ldi	r25, 0xFF	; 255
 a86:	2c 96       	adiw	r28, 0x0c	; 12
 a88:	e2 e1       	ldi	r30, 0x12	; 18
 a8a:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__epilogue_restores__>

00000a8e <strnlen_P>:
 a8e:	fc 01       	movw	r30, r24
 a90:	05 90       	lpm	r0, Z+
 a92:	61 50       	subi	r22, 0x01	; 1
 a94:	70 40       	sbci	r23, 0x00	; 0
 a96:	01 10       	cpse	r0, r1
 a98:	d8 f7       	brcc	.-10     	; 0xa90 <strnlen_P+0x2>
 a9a:	80 95       	com	r24
 a9c:	90 95       	com	r25
 a9e:	8e 0f       	add	r24, r30
 aa0:	9f 1f       	adc	r25, r31
 aa2:	08 95       	ret

00000aa4 <strnlen>:
 aa4:	fc 01       	movw	r30, r24
 aa6:	61 50       	subi	r22, 0x01	; 1
 aa8:	70 40       	sbci	r23, 0x00	; 0
 aaa:	01 90       	ld	r0, Z+
 aac:	01 10       	cpse	r0, r1
 aae:	d8 f7       	brcc	.-10     	; 0xaa6 <strnlen+0x2>
 ab0:	80 95       	com	r24
 ab2:	90 95       	com	r25
 ab4:	8e 0f       	add	r24, r30
 ab6:	9f 1f       	adc	r25, r31
 ab8:	08 95       	ret

00000aba <fputc>:
 aba:	0f 93       	push	r16
 abc:	1f 93       	push	r17
 abe:	cf 93       	push	r28
 ac0:	df 93       	push	r29
 ac2:	18 2f       	mov	r17, r24
 ac4:	09 2f       	mov	r16, r25
 ac6:	eb 01       	movw	r28, r22
 ac8:	8b 81       	ldd	r24, Y+3	; 0x03
 aca:	81 fd       	sbrc	r24, 1
 acc:	03 c0       	rjmp	.+6      	; 0xad4 <fputc+0x1a>
 ace:	8f ef       	ldi	r24, 0xFF	; 255
 ad0:	9f ef       	ldi	r25, 0xFF	; 255
 ad2:	20 c0       	rjmp	.+64     	; 0xb14 <fputc+0x5a>
 ad4:	82 ff       	sbrs	r24, 2
 ad6:	10 c0       	rjmp	.+32     	; 0xaf8 <fputc+0x3e>
 ad8:	4e 81       	ldd	r20, Y+6	; 0x06
 ada:	5f 81       	ldd	r21, Y+7	; 0x07
 adc:	2c 81       	ldd	r18, Y+4	; 0x04
 ade:	3d 81       	ldd	r19, Y+5	; 0x05
 ae0:	42 17       	cp	r20, r18
 ae2:	53 07       	cpc	r21, r19
 ae4:	7c f4       	brge	.+30     	; 0xb04 <fputc+0x4a>
 ae6:	e8 81       	ld	r30, Y
 ae8:	f9 81       	ldd	r31, Y+1	; 0x01
 aea:	9f 01       	movw	r18, r30
 aec:	2f 5f       	subi	r18, 0xFF	; 255
 aee:	3f 4f       	sbci	r19, 0xFF	; 255
 af0:	39 83       	std	Y+1, r19	; 0x01
 af2:	28 83       	st	Y, r18
 af4:	10 83       	st	Z, r17
 af6:	06 c0       	rjmp	.+12     	; 0xb04 <fputc+0x4a>
 af8:	e8 85       	ldd	r30, Y+8	; 0x08
 afa:	f9 85       	ldd	r31, Y+9	; 0x09
 afc:	81 2f       	mov	r24, r17
 afe:	09 95       	icall
 b00:	89 2b       	or	r24, r25
 b02:	29 f7       	brne	.-54     	; 0xace <fputc+0x14>
 b04:	2e 81       	ldd	r18, Y+6	; 0x06
 b06:	3f 81       	ldd	r19, Y+7	; 0x07
 b08:	2f 5f       	subi	r18, 0xFF	; 255
 b0a:	3f 4f       	sbci	r19, 0xFF	; 255
 b0c:	3f 83       	std	Y+7, r19	; 0x07
 b0e:	2e 83       	std	Y+6, r18	; 0x06
 b10:	81 2f       	mov	r24, r17
 b12:	90 2f       	mov	r25, r16
 b14:	df 91       	pop	r29
 b16:	cf 91       	pop	r28
 b18:	1f 91       	pop	r17
 b1a:	0f 91       	pop	r16
 b1c:	08 95       	ret

00000b1e <__ultoa_invert>:
 b1e:	fa 01       	movw	r30, r20
 b20:	aa 27       	eor	r26, r26
 b22:	28 30       	cpi	r18, 0x08	; 8
 b24:	51 f1       	breq	.+84     	; 0xb7a <__ultoa_invert+0x5c>
 b26:	20 31       	cpi	r18, 0x10	; 16
 b28:	81 f1       	breq	.+96     	; 0xb8a <__ultoa_invert+0x6c>
 b2a:	e8 94       	clt
 b2c:	6f 93       	push	r22
 b2e:	6e 7f       	andi	r22, 0xFE	; 254
 b30:	6e 5f       	subi	r22, 0xFE	; 254
 b32:	7f 4f       	sbci	r23, 0xFF	; 255
 b34:	8f 4f       	sbci	r24, 0xFF	; 255
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	af 4f       	sbci	r26, 0xFF	; 255
 b3a:	b1 e0       	ldi	r27, 0x01	; 1
 b3c:	3e d0       	rcall	.+124    	; 0xbba <__ultoa_invert+0x9c>
 b3e:	b4 e0       	ldi	r27, 0x04	; 4
 b40:	3c d0       	rcall	.+120    	; 0xbba <__ultoa_invert+0x9c>
 b42:	67 0f       	add	r22, r23
 b44:	78 1f       	adc	r23, r24
 b46:	89 1f       	adc	r24, r25
 b48:	9a 1f       	adc	r25, r26
 b4a:	a1 1d       	adc	r26, r1
 b4c:	68 0f       	add	r22, r24
 b4e:	79 1f       	adc	r23, r25
 b50:	8a 1f       	adc	r24, r26
 b52:	91 1d       	adc	r25, r1
 b54:	a1 1d       	adc	r26, r1
 b56:	6a 0f       	add	r22, r26
 b58:	71 1d       	adc	r23, r1
 b5a:	81 1d       	adc	r24, r1
 b5c:	91 1d       	adc	r25, r1
 b5e:	a1 1d       	adc	r26, r1
 b60:	20 d0       	rcall	.+64     	; 0xba2 <__ultoa_invert+0x84>
 b62:	09 f4       	brne	.+2      	; 0xb66 <__ultoa_invert+0x48>
 b64:	68 94       	set
 b66:	3f 91       	pop	r19
 b68:	2a e0       	ldi	r18, 0x0A	; 10
 b6a:	26 9f       	mul	r18, r22
 b6c:	11 24       	eor	r1, r1
 b6e:	30 19       	sub	r19, r0
 b70:	30 5d       	subi	r19, 0xD0	; 208
 b72:	31 93       	st	Z+, r19
 b74:	de f6       	brtc	.-74     	; 0xb2c <__ultoa_invert+0xe>
 b76:	cf 01       	movw	r24, r30
 b78:	08 95       	ret
 b7a:	46 2f       	mov	r20, r22
 b7c:	47 70       	andi	r20, 0x07	; 7
 b7e:	40 5d       	subi	r20, 0xD0	; 208
 b80:	41 93       	st	Z+, r20
 b82:	b3 e0       	ldi	r27, 0x03	; 3
 b84:	0f d0       	rcall	.+30     	; 0xba4 <__ultoa_invert+0x86>
 b86:	c9 f7       	brne	.-14     	; 0xb7a <__ultoa_invert+0x5c>
 b88:	f6 cf       	rjmp	.-20     	; 0xb76 <__ultoa_invert+0x58>
 b8a:	46 2f       	mov	r20, r22
 b8c:	4f 70       	andi	r20, 0x0F	; 15
 b8e:	40 5d       	subi	r20, 0xD0	; 208
 b90:	4a 33       	cpi	r20, 0x3A	; 58
 b92:	18 f0       	brcs	.+6      	; 0xb9a <__ultoa_invert+0x7c>
 b94:	49 5d       	subi	r20, 0xD9	; 217
 b96:	31 fd       	sbrc	r19, 1
 b98:	40 52       	subi	r20, 0x20	; 32
 b9a:	41 93       	st	Z+, r20
 b9c:	02 d0       	rcall	.+4      	; 0xba2 <__ultoa_invert+0x84>
 b9e:	a9 f7       	brne	.-22     	; 0xb8a <__ultoa_invert+0x6c>
 ba0:	ea cf       	rjmp	.-44     	; 0xb76 <__ultoa_invert+0x58>
 ba2:	b4 e0       	ldi	r27, 0x04	; 4
 ba4:	a6 95       	lsr	r26
 ba6:	97 95       	ror	r25
 ba8:	87 95       	ror	r24
 baa:	77 95       	ror	r23
 bac:	67 95       	ror	r22
 bae:	ba 95       	dec	r27
 bb0:	c9 f7       	brne	.-14     	; 0xba4 <__ultoa_invert+0x86>
 bb2:	00 97       	sbiw	r24, 0x00	; 0
 bb4:	61 05       	cpc	r22, r1
 bb6:	71 05       	cpc	r23, r1
 bb8:	08 95       	ret
 bba:	9b 01       	movw	r18, r22
 bbc:	ac 01       	movw	r20, r24
 bbe:	0a 2e       	mov	r0, r26
 bc0:	06 94       	lsr	r0
 bc2:	57 95       	ror	r21
 bc4:	47 95       	ror	r20
 bc6:	37 95       	ror	r19
 bc8:	27 95       	ror	r18
 bca:	ba 95       	dec	r27
 bcc:	c9 f7       	brne	.-14     	; 0xbc0 <__ultoa_invert+0xa2>
 bce:	62 0f       	add	r22, r18
 bd0:	73 1f       	adc	r23, r19
 bd2:	84 1f       	adc	r24, r20
 bd4:	95 1f       	adc	r25, r21
 bd6:	a0 1d       	adc	r26, r0
 bd8:	08 95       	ret

00000bda <__prologue_saves__>:
 bda:	2f 92       	push	r2
 bdc:	3f 92       	push	r3
 bde:	4f 92       	push	r4
 be0:	5f 92       	push	r5
 be2:	6f 92       	push	r6
 be4:	7f 92       	push	r7
 be6:	8f 92       	push	r8
 be8:	9f 92       	push	r9
 bea:	af 92       	push	r10
 bec:	bf 92       	push	r11
 bee:	cf 92       	push	r12
 bf0:	df 92       	push	r13
 bf2:	ef 92       	push	r14
 bf4:	ff 92       	push	r15
 bf6:	0f 93       	push	r16
 bf8:	1f 93       	push	r17
 bfa:	cf 93       	push	r28
 bfc:	df 93       	push	r29
 bfe:	cd b7       	in	r28, 0x3d	; 61
 c00:	de b7       	in	r29, 0x3e	; 62
 c02:	ca 1b       	sub	r28, r26
 c04:	db 0b       	sbc	r29, r27
 c06:	0f b6       	in	r0, 0x3f	; 63
 c08:	f8 94       	cli
 c0a:	de bf       	out	0x3e, r29	; 62
 c0c:	0f be       	out	0x3f, r0	; 63
 c0e:	cd bf       	out	0x3d, r28	; 61
 c10:	09 94       	ijmp

00000c12 <__epilogue_restores__>:
 c12:	2a 88       	ldd	r2, Y+18	; 0x12
 c14:	39 88       	ldd	r3, Y+17	; 0x11
 c16:	48 88       	ldd	r4, Y+16	; 0x10
 c18:	5f 84       	ldd	r5, Y+15	; 0x0f
 c1a:	6e 84       	ldd	r6, Y+14	; 0x0e
 c1c:	7d 84       	ldd	r7, Y+13	; 0x0d
 c1e:	8c 84       	ldd	r8, Y+12	; 0x0c
 c20:	9b 84       	ldd	r9, Y+11	; 0x0b
 c22:	aa 84       	ldd	r10, Y+10	; 0x0a
 c24:	b9 84       	ldd	r11, Y+9	; 0x09
 c26:	c8 84       	ldd	r12, Y+8	; 0x08
 c28:	df 80       	ldd	r13, Y+7	; 0x07
 c2a:	ee 80       	ldd	r14, Y+6	; 0x06
 c2c:	fd 80       	ldd	r15, Y+5	; 0x05
 c2e:	0c 81       	ldd	r16, Y+4	; 0x04
 c30:	1b 81       	ldd	r17, Y+3	; 0x03
 c32:	aa 81       	ldd	r26, Y+2	; 0x02
 c34:	b9 81       	ldd	r27, Y+1	; 0x01
 c36:	ce 0f       	add	r28, r30
 c38:	d1 1d       	adc	r29, r1
 c3a:	0f b6       	in	r0, 0x3f	; 63
 c3c:	f8 94       	cli
 c3e:	de bf       	out	0x3e, r29	; 62
 c40:	0f be       	out	0x3f, r0	; 63
 c42:	cd bf       	out	0x3d, r28	; 61
 c44:	ed 01       	movw	r28, r26
 c46:	08 95       	ret

00000c48 <_exit>:
 c48:	f8 94       	cli

00000c4a <__stop_program>:
 c4a:	ff cf       	rjmp	.-2      	; 0xc4a <__stop_program>
